==================================================================
			High-Level Architecture Gameplan
==================================================================
This is our general organization plan for the final project. We
are planning to use a GameObject/Component system for our game, and
we will build the system up incrementally. The idea is to abtract 
the interactions with the engine from the development of the game 
itself. The plan for this project is to implement a subset of this,
beginning with the GameObject itself and slowly introducing components 
which encapsulate the functionality. 




==================================================================
Camera Class? (Undecided if it should hang out by itself).



==================================================================
Light Class? (Undecided if it should hang out by itself).
	


==================================================================
Game Class:
	Member Variables:
		Vector<GameObjects> gameObjects;
		Vector<Camera> cameras; // This is also subjective to whether cameras derive from GameObject.
		Vector<Light> lights; // This is also subjective to whether light derive from GameObject.


	Methods:

		SetupViewport();

		UpdateGameObjects():
			for each gameObject in gameObjects:
				gameObject.Update();
		
		bool IsGameOver();



==================================================================
GameObject Class:
	Components:
		Required:
			Transform (Position, Rotation, Scale, Parenting/Children)
				SceneNode &sceneNode;
			Scripting:
				Start();
				Update();
				FixedUpdate();
		Optional:
			Renderer
				OgreEntity;
			Physics (Undecided if should make separate from Collision component yet).
				Bullet nonsense;
			Sounds
			Collision (Definitely will rely on Physics component, undecided if should make own separate component yet.)
	
	Member Variables:
		vector <Component> components;
		String name
		String tag? (Undecided if worth it to include yet.)
		bool enabled;

	Methods:
		void AddComponent<Type>();
		void KillComponent<Type>();
		Type GetComponentOfType<Type>();

		void Update():
			for each component in components:
				component.Update();

		void Kill();

		

==================================================================
Component Class:
	Member Variables:
		GameObject &gameObject;
		bool enabled;

	
	Methods:
		virtual void Update();

		// Convenience wrappers to access other components
		Transform transform {
			return gameObject.transform;
		}
		// Ditto for all components...

==================================================================
Input Class? (Tentatively depending on nastiness of OIS):
	Functions like:
		IsButton/KeyUp(String buttonName);
	


==================================================================
Time Class:
	float time; // Time since game started
	float deltaTime; // Time since last frame
	float timeStep; // Time scale
	float fixedTimeStep; // Physics time step




