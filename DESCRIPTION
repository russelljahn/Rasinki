==================================================
	                     .__        __   .__ 
	____________    _____|__| ____ |  | _|__|
	\_  __ \__  \  /  ___/  |/    \|  |/ /  |
	 |  | \// __ \_\___ \|  |   |  \    <|  |
	 |__|  (____  /____  >__|___|  /__|_ \__|
	            \/     \/        \/     \/  
	      		Rasinki Description
==================================================

Team 13:
Russell Jahn
Kevin Wade
Safaa Hansen
Noah Gregg

---------------------
Description:
---------------------
Rasinki is a third person tower defense game.

---------------------
Rules:
---------------------
The goal is to kill all of the ninjas before they reach your castle.  To do this, you must
place towers and construct a maze.  Towers will automatically attack nearby ninjas as they
go by.  There are 10 increasingly difficult levels to survive.  If too many ninjas reach
your castle, you lose.

Ninjas give the player points and gold when they are killed.  The gold is used to purchase
walls and towers.  Small towers cost 20 gold, walls cost 1 gold, and upgraded towers cost 100 gold.
Structuers can be sold for a small refund.


---------------------
Controls:
---------------------
WASD to move the robot around
1 and 2 to swap between building a tower or a wall
z to send the next wave of ninjas
Shift to change the camera perspective
Mouse click to place a structure on an empty grid square
Click while highlighting a square that contains a structure: opens a menu letting the player sell or upgrade
 the structure.
---------------------
New Features:
---------------------
Completly New Game:  Our game for project 2 and 3 was a 3D version of
breakout.  For this project we through that out, and started over almost
completely.  Luckily the foundation we built in the previous projects made
this transition less painful.

Pathfinding: Our game features a pathfinding system for the ninjas.  The ninjas use A* to find a 
route from their spawn point to the players castle.  Additionally, our pathfinding system 
immediately updates the path of ninjas who have obstacles placed in their way.  We also use the 
pathfinding system to guarantee that there is always a valid route from the ninja spawn to the
castle. 

Animated character controller: 

Simple particle system:  When a ninja is hit by a tower we briefly display an explosion particle effect

---------------------
Engine Features:
---------------------
Our engine uses a modular Component/GameObject system to abstract away details of the underlying rendering and 
physics engines and provide an easier, cleaner, and much more friendly interface to the gameplay programmer.

GameObjects are abstract objects in the game scene. They can be players, environmental objects, or even gameplay managers.
GameObjects contain Components, which each define some specific functionality for a GameObject.

Built-in components include:
............................
Transform: Required, contains info about position, rotation, scale, and hierarchy information for a GameObject.

Renderer: Required, contains info about how to render a GameObject, including the mesh or if the GameObject should be invisible. Easy to disable during gameplay if the object should currently be unseen.

Physics: Required, contains info on how the GameObject should react to forces and other GameObjects in the world, what type of collider to use, and even if physics shouldn't be applied. Easy to disable during gameplay if the object shouldn't currently have physics applied.

Script: Optional, these can be attached to GameObjects to provide gameplay logic to them. For instance, the paddle has 2 scripts attached: one handling keyboard control for the paddle, and another gameplay manager script, which handles the gameover/winning state logic for the game.


Since each of the components abstract away so much of the gritty, underlying engine details for actual gameplay programming, building it ended up being a big win for programmer productivity.
